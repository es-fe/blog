(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{364:function(t,e,a){"use strict";a.r(e);var s=a(45),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("br"),t._v(" "),a("h4",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("近几年，前端社区中 DSL 这个词开始频繁出镜，这和环境的变化有很大关系：")]),t._v(" "),a("ol",[a("li",[t._v("React、Vue、Angular 等现代框架的表现层设计往往和 DSL 有较强的关联，透过这些优秀作品我们可以得到一些实践指引。")]),t._v(" "),a("li",[t._v("前端相关语言的转编译工具链趋于成熟，如 babel，postcss 等工具可以帮助开发者以扩展插件的方式低成本地参与到语言构建流程中。")]),t._v(" "),a("li",[t._v("社区的解析器生成工具开始普及。如"),a("a",{attrs:{href:"https://github.com/zaach/jison",target:"_blank",rel:"noopener noreferrer"}},[t._v("json"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//pegjs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEG.js"),a("OutboundLink")],1)])]),t._v(" "),a("h4",{attrs:{id:"dsl初识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dsl初识"}},[t._v("#")]),t._v(" DSL初识")]),t._v(" "),a("blockquote",[a("p",[t._v("和很多计算机领域的概念一样，DSL其实也算是先有实践再有定义。\n一种为"),a("strong",[t._v("特定领域")]),t._v("设计的，具有"),a("strong",[t._v("受限表达性")]),t._v("的"),a("strong",[t._v("编程语言")])])]),t._v(" "),a("p",[t._v("DSL即[Domain Specific Language], 中文一般译为[领域特定语言]")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-6c0629a04ad5e6859c0499f71082ec24_720w.jpg",alt:""}}),t._v("\n如上图所示，汇编语言通过助记符代替机器指令操作码，极大的增强了机器语言的可读性和可维护性。但本质上它仍是一门面向处理器和寄存器等硬件系统的低级编程语言。\n高级语言的出现解决了这个问题，真正脱离了对机器指令集的直接关联，以上层抽象的语句(流程控制、循环等)和数据结构等更趋近自然语言和数学公式的方式完成编码工作，大大提升了程序开发的效率。")]),t._v(" "),a("p",[t._v("但在高级语言层面，抽象带来的效率提升似乎有了天花板。无论是从 C 到 Java，抑或是各种编程范式下衍生的抽象度更高的编程语言，解决的都是通用编程问题，它们都有充分的过程抽象和数据抽象，\n导致大量的概念产生，进而影响了编程效率。")]),t._v(" "),a("p",[t._v("而在一些专有领域的任务处理上其实不需要那么多语言特性，DSL 就是在这种矛盾中产生的破局方案，它是为了解决特定任务的语言工具，比如文档编写有 markdown，\n字符串匹配有 RegExp，任务控制有 make、gradle，数据查找有 SQL，Web 样式编码有 CSS 等等。它的本质其实和我们很多软件工程问题的解决思路一样，\n"),a("strong",[t._v("通过限定问题域边界，从而锁定复杂度，提高编程效率")]),t._v("。")]),t._v(" "),a("p",[t._v("我们先来个简单的例子， 比如表示"),a("strong",[t._v("2周前的时间：")])]),t._v(" "),a("p",[a("strong",[t._v("解法一")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("new Date(Date.now() - 1000 * 60 * 60 * 24 * 7 * 2)\n")])])]),a("p",[a("strong",[t._v("解法二")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("2 weeks().ago()\n")])])]),a("p",[a("strong",[t._v("解法三")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("(2).weeks().ago();\n")])])]),a("p",[t._v("解法一是符合通用编程思维的解答，但即使作为程序员的我们也无法一眼看出其含义。")]),t._v(" "),a("p",[t._v("解法二和解法三其实就是 DSL 的两种不同类型——外部 DSL 和内部 DSL，它们的直观性显然更高（不信可以问问你的女朋友），但它却无法直接运行，\n假如你尝试在 JavaScript 环境下运行它，将会获得完全不同的错误：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("2 weeks ago")]),t._v("会得到"),a("code",[t._v("Uncaught SyntaxError: Unexpected identifier")]),t._v("的"),a("strong",[t._v("语法错误")])]),t._v(" "),a("li",[a("code",[t._v("(2).weeks().ago()")]),t._v("会得到一个"),a("code",[t._v("Uncaught TypeError: 2.weeks is not a function")]),t._v("的"),a("strong",[t._v("运行时类型错误")]),t._v("。")])]),t._v(" "),a("blockquote",[a("p",[t._v("其实从错误类型上我们就可以看到它们是有本质不同的。")])])])}),[],!1,null,null,null);e.default=r.exports}}]);